#!/bin/bash

# Description
# ===========
#
# Configuration file for the Binary Space Partitioning Window Manager.
# This is part of my dotfiles, which are managed with GNU Stow.  See
# https://gitlab.com/protesilaos/dotfiles

# Visual options
# ==============

# window management
# -----------------
# also see `man bspc` or `man bspwm`
bspc config border_width 3
bspc config window_gap 6
bspc config split_ratio 0.50
bspc config single_monocle true # smart borders
bspc config borderless_monocle true # smart borders
bspc config gapless_monocle false # use "true" for smart gaps
bspc config paddingless_monocle false
bspc config focus_follows_pointer false
bspc config pointer_follows_monitor true # brings pointer to focused monitor (see workspaces)
bspc config pointer_modifier mod1 # ALT key (see why right below)
bspc config pointer_action1 move # alt + left-click to move node
bspc config pointer_action2 resize_side # alt + right-click to resize node splits
bspc config click_to_focus any # focus with any click
bspc config swallow_first_click false # play the mouse event (e.g. right click context menu)
bspc config initial_polarity first_child
bspc config ignore_ewmh_focus true # prevent focus stealing

# Program-specific rules (use `xprop` to find each window's specifics).
# For special use cases, I apply "my_float_window" for programs that can
# accept a custom name/class.  These two definitions apply a custom
# class and name respectively.
bspc rule -a my_float_window:* state=floating
bspc rule -a *:my_float_window state=floating

# External window rules.
bspc config external_rules_command "$(command -v own_script_bspwm_external_rules_command 2> /dev/null)"

# colours
# -------

# DO NOT EDIT: these are modified programmatically by
# `own_script_update_environment_theme` and/or its frontend
# `tempusmenu`.
bspc config normal_border_color "#312e30" # unfocused window
bspc config active_border_color "#b58d88" # focused window, unfocused monitor
bspc config focused_border_color "#6da280" # focused window, focused monitor
bspc config presel_feedback_color "#2a2829" # feedback for manual node split

# autostart
# =========

# The hotkey daemon that handles all custom key bindings, including the
# ones that control BSPWM
sxhkd &

# Launch my custom Lemonbar implementation
if [ "$(command -v melonpanel 2> /dev/null)" ]; then
	# Make sure we have no running instances
	if pgrep -x melonpanel; then
		pkill -x melonpanel
	fi

	melonpanel
fi

# display compositor for shadow effects and background blur behind
# transparent elements
if [ "$(command -v compton 2> /dev/null)" ]; then
	compton --config "$HOME/.config/compton.conf" &
fi

# Run the tool that sets the wallpaper.  A program could be used that
# handles the desktop in general, including the option to set icons.
# But this is enough for my case.  Here is a command I tested and which
# works (using the Xfce desktop manager):
# xfdesktop --sm-client-disable --disable-wm-check &
if [ "$(command -v feh 2> /dev/null)" ]; then
	if [ -f "$HOME/.fehbg" ]; then
		"$HOME/.fehbg" &
	elif [ -f "$HOME/.wallpaper.jpg" ]; then
		feh --bg-fill "$HOME/.wallpaper.jpg" &
	else
		feh --bg-fill "$HOME/.local/share/my_bspwm_wallpaper_fallback.png" &
	fi
fi

# specify keyboard layout and compose key
if [ "$(command -v setxkbmap 2> /dev/null)" ]; then
	# setxkbmap -layout 'us,gr' -option 'grp:alt_caps_toggle'
	setxkbmap -layout 'us'
	setxkbmap -option compose:menu

	# For the key chord that performs the layout switching between US
	# QWERTY and Greek see my `sxhkdrc`.  The script:
	# `own_script_current_keyboard_layout`
fi

# start the MATE/Xfce settings daemon to apply GTK themes to running
# applications as well as flatpaks.
#
# For details, refer to the "bin" directory of my dotfiles,
# https://gitlab.com/protesilaos/dotfiles.
#
# Specifically, see the `modify_running_gtk_and_flatpak` function of the
# "own_script_update_environment_theme" script.
#
# Maybe also check my blog post:
# https://protesilaos.com/codelog/bspwm-flatpak-themes/
if [ "$(command -v flatpak 2> /dev/null)" ]; then
	if [ "$(command -v mate-settings-daemon 2> /dev/null)" ]; then
		mate-settings-daemon &
	elif [ "$(command -v xfsettingsd 2> /dev/null)" ]; then
		xfsettingsd
	fi
fi

# start music server
if [ "$(command -v mpd 2> /dev/null)" ]; then
	mpd
fi

# Start the bridge between mpd and mpris2.  Enabling the MPRIS
# implementation allows other programs that handle multimedia to
# interface with `mpd`.  This is the case, for example, with programs
# such as `playerctl`, or with desktop environments that offer
# multimedia controls in their shell (e.g.  GNOME, Cinnamon, etc.).
#
# See my `sxhkdrc` for the set of key bindings that handles media
# controls in general and `mpd` in particular.
if [ "$(command -v mpDris2 2> /dev/null)" ]; then
	mpDris2 &
fi

# Per host configurations
# =======================

# I deploy my dotfiles on two separate machines.  On one I often run a
# dual monitor setup.  As such, there are some bespoke configs for each
# host.  Settings such as workspaces [per monitor] and program-specific
# window rules are included.
if [ "$(command -v own_script_bspwm_per_host_configs)" ]; then
	own_script_bspwm_per_host_configs
fi
