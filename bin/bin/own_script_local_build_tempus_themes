#!/bin/bash

    # This program is free software: you can redistribute it and/or modify
    # it under the terms of the GNU General Public License as published by
    # the Free Software Foundation, either version 3 of the License, or
    # (at your option) any later version.

    # This program is distributed in the hope that it will be useful,
    # but WITHOUT ANY WARRANTY; without even the implied warranty of
    # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    # GNU General Public License for more details.

    # You should have received a copy of the GNU General Public License
    # along with this program.  If not, see <http://www.gnu.org/licenses/>.

# README for dependencies {{{
# ---------------------------

# Builds theme files for all items in the Tempus Themes collection and
# places them in their corresponding location inside my dotfiles.  For
# this to work, there are two prerequisites.
#
# 1. My dotfiles are in the home directory.  See
#    https://gitlab.com/protesilaos/dotfiles
# 2. The Tempus Themes generator is also at the home dir.  See:
#    https://gitlab.com/protesilaos/tempus-themes-generator
# 
# The utility of this script is only realised when I modify the source
# of the existing Tempus Themes and/or add a new theme (new templates
# would require modifications to this script).  It makes it easy to
# incorporate those changes to my dots.
#
# Note that this script only builds files that are included with my
# dotfiles.  The Tempus Themes generator has templates for programs that
# I do not actively use, such as Tilix and Konsole. If you wish to
# contribute to the Tempus Themes project, see the generator's
# CONTRIBUTING.md.
#
# Last reviewed on 2018-11-01.
#
# }}}

# Variables for the operations {{{
# --------------------------------

# The generator path
tempus_generator_dir=$HOME/tempus-themes-generator

# The generator script inside the generator directory
tempus_generator_script=$tempus_generator_dir/tempus-themes-generator.sh

# Get the list of the available schemes from inside the generator's
# directory
# TODO do not use `ls`.  Run this instead (needs testing):
# find "$HOME/.my_colours/tempus/" -type f -printf "%f\\n" | sed -e
# 's/tempus_\([a-z]*\).Xcolors/\1/g' | sort
tempus_schemes=$(ls "$tempus_generator_dir/schemes")

# Destination path used by some functions
# MAYBE TODO change this to `my_colours`.  Would also have to modify the
# Xresources function and all impacted files.
local_col_dir=$HOME/.my_colours

# }}}

# Check dependencies before the building process {{{
# --------------------------------------------------
# 
# This assumes that the names of these directories correspond to the
# ones I have in my home directory.  For my dotfiles, I run a test on
# two destination, $HOME/dotfiles and $HOME/dotfiles-prot.  The former
# is the one I use.  The latter is what I recommend in the README for
# people to set as a git clone target.
#
# NOTE this script is not fool proof, so if you have something else that
# meets those conditions, you might run into unexpected behaviour.
if [ -d "$HOME/dotfiles" ] || [ -d "$HOME/dotfiles-prot" ]; then
    echo "GOOD. The dotfiles of Protesilaos Stavrou are assumed to be in place."
    echo "Continuing to build the Tempus Themes for the local setup."
else
    echo "ERROR. Unmet dependency for the dotfiles of Protesilaos Stavrou."
    echo "Get them with this command:"
    echo "git clone --depth 1 https://gitlab.com/protesilaos/dotfiles.git"
    exit 1
fi

if [ -d "$tempus_generator_dir" ]; then
    echo "GOOD. The Tempus Themes generator is assumed to be in place."
    echo "Continuing to build the Tempus Themes for the local setup."
else
    echo "ERROR. Unmet dependency for the Tempus Themes generator."
    echo "Get it with this command:"
    echo "git clone --depth 1 https://gitlab.com/protesilaos/tempus-themes-generator.git"
    exit 1
fi

# }}}

# Core functions for all the build processes {{{
# ----------------------------------------------

# This is the generator's command.  The script accepts two arguments.
# The first is the name of the scheme.  The second is the template.  For
# example, the following will output the Winter colours for Vim to
# stdout:
#
# ./tempus-themes-generator.sh winter vim
#
# This can then be redirected into a file.
#
# As such, the `invoke_generator()` accepts a total of four arguments
# from the subsequent functions.  In order, these pass the following
# information:
#
# 1. Scheme name
# 2. Template name
# 3. Destination path
# 4. Name of output file
invoke_generator() {
    "$tempus_generator_script" "$1" "$2" > "$3"/tempus_"$4"
}

# As there are a number of Tempus schemes, we will run a loop that
# iterates over each of them.  This executes the `invoke_generator()`,
# passing to it the scheme name which is needed for that function's
# arguments 1 and 4 (see its description).
#
# The `invoke_generic_loop()` accepts threee arguments from subsequent
# functions.  These define the following:
#
# 1. Template name
# 2. Destination path
# 3. File type extension
invoke_generic_loop() {
    for i in $tempus_schemes
    do
        invoke_generator "$i" "$1" "$2" "$i"."$3"
    done
}

# }}}

# Functions for app-specific builds {{{
# -------------------------------------

# Function to build all Tempus themes for GTK{3,4} source view (syntax
# highlighting for GNOME Builder, Gedit, Pluma, Xed, Mousepad, etc.).
# It starts by invoking the generic loop that iterates over each scheme
# file.  Then we pass to it the following arguments:
#
# 1. The 'gtksourceview{3,4}' template name
# 2. Destination path for $HOME/.local/share/gtksourceview-{3.0,4}/styles
# 3. File type extension for tempus_$i.xml
build_gtksourceview3() {
    local dest_dir=$HOME/.local/share/gtksourceview-3.0/styles
    echo "Building themes for GTK Source View 3."
    mkdir -p "$dest_dir"
    echo "Destination is: $dest_dir/"
    invoke_generic_loop gtksourceview3 "$dest_dir" xml
    echo "Done with GTK Source View 3."
}

build_gtksourceview4() {
    local dest_dir=$HOME/.local/share/gtksourceview-4/styles
    echo "Building themes for GTK Source View 4."
    mkdir -p "$dest_dir"
    echo "Destination is: $dest_dir/"
    invoke_generic_loop gtksourceview4 "$dest_dir" xml
    echo "Done with GTK Source View 4."
}

# Function to build all Tempus themes for Kitty.  It starts by invoking
# the generic loop that iterates over each scheme file.  Then we pass to
# it the following arguments:
#
# 1. The 'kitty' template name
# 2. Destination path for $HOME/.my_colours/kitty
# 3. File type extension for tempus_$i.conf
build_kitty() {
    local dest_dir=$local_col_dir/kitty
    echo "Building themes for Kitty."
    mkdir -p "$dest_dir"
    echo "Destination is: $dest_dir/"
    invoke_generic_loop kitty "$dest_dir" conf
    echo "Done with Kitty."
}

# Function to build all Tempus themes for the shell.  It starts by
# invoking the generic loop that iterates over each scheme file.  Then
# we pass to it the following arguments:
#
# 1. The 'shell-variables' template name
# 2. Destination path for $HOME/.my_colours/shell
# 3. File type extension for tempus_$i.sh
build_shell() {
    local dest_dir=$local_col_dir/shell
    echo "Building themes for the Shell."
    mkdir -p "$dest_dir"
    echo "Destination is: $dest_dir/"
    invoke_generic_loop shell-variables "$dest_dir" sh
    echo "Done with the Shell."
}

# Function to build all Tempus themes for the Simple Terminal by
# suckless.  It starts by invoking the generic loop that
# iterates over each scheme file.  Then we pass to it the following
# arguments:
#
# 1. The 'st' template name
# 2. Destination path for $HOME/st/themes
# 3. File type extension for tempus_$i.h
#
# See my fork https://gitlab.com/protesilaos/st
# NOTE st uses a different destination path than the rest.
build_st() {
    echo "Building themes for the Simple Terminal."
    echo "Destination is: $HOME/st/themes/"
    invoke_generic_loop st "$HOME/st/themes" h
    echo "Done with ST."

    # If the git variant of my `st` fork is in the home dir, also build
    # the themes for it.  I always give it the name defined below, to
    # distinguish it from the "st" that is bundled with my dotfiles and
    # which is added to $HOME as a symlink (with GNU Stow).
    if [ -d "$HOME/st-prot-source" ]; then
        echo "Also building themes for the Simple Terminal fork."
        echo "Destination is: $HOME/st-prot-source/themes/"
        invoke_generic_loop st "$HOME/st-prot-source/themes" h
        echo "Done with the ST fork."
    fi
}

# Function to build all Tempus themes for the X server.  It starts by
# invoking the generic loop that iterates over each scheme file.  Then
# we pass to it the following arguments:
#
# 1. The 'xcolors' template name
# 2. Destination path for $HOME/.my_colours/tempus
# 3. File type extension for tempus_$i.Xcolors
build_xcolors() {
    local dest_dir=$local_col_dir/tempus
    echo "Building themes for X resources."
    mkdir -p "$dest_dir"
    echo "Destination is: $dest_dir/"
    invoke_generic_loop xcolors "$dest_dir" Xcolors
    echo "Done with X resources."
}

# Function to build all Tempus themes for the Xfce 4 terminal emulator.
# It starts by invoking the generic loop that iterates over each scheme
# file.  Then we pass to it the following arguments:
#
# 1. The 'xfce4-terminal' template name
# 2. Destination path for $HOME/.local/share/xfce4/terminal/colorschemes
# 3. File type extension for $HOME/.local/share/xfce4/terminal/colorschemes/tempus_$i.theme
build_xfce4_terminal() {
    local dest_dir=$HOME/.local/share/xfce4/terminal/colorschemes
    echo "Building themes for Xfce4 terminal."
    mkdir -p "$dest_dir"
    echo "Destination is: $dest_dir/"
    invoke_generic_loop xfce4-terminal "$dest_dir" theme
    echo "Done with the Xfce4 terminal."
}

# }}}

# Build everything {{{
# --------------------

# Run all build functions, unless the programs are not available.  The
# condition applies to Kitty and the Simple Terminal.  Note that the
# latter is bundled with my dotfiles and is located in my home "bin"
# directory.
build_all() {
    build_gtksourceview3
    build_gtksourceview4
    if [ -x /usr/bin/kitty ]; then
        build_kitty
    fi
    build_shell
    if [ -x "$HOME/bin/st" ]; then
        build_st
    fi
    #build_xcolors
    build_xfce4_terminal
}

# return results
build_all

# Send notification.
echo ""
echo "Done building all theme files."
echo "Changes should be reflected in the dotfiles."
notify-send -i clock "Theme files for the local setup" "All Tempus Themes have been rebuilt. Changes should be reflected in the dotfiles."

# }}}

# vi: foldmethod=marker
