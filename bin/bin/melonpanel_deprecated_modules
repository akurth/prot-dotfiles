# This file contains the deprecated functions that were once part of my
# Lemonbar implementation (called "melonpanel").  These have been kept
# for future reference, as they might still prove useful.
#
# Part of my dotfiles: https://gitlab.com/protesilaos/dotfiles

###### DEPRECATED but kept for future reference
#### # Check if mpd is running, what is its state, and output the appropriate
#### # glyph.  If mpd is stopped or not running, omit the glyph.
#### ancillary_mpd_playing() {
####     local mpc_status=$(mpc status | grep "[[a-z]*]")
#### 
####     if [[ "$mpc_status" == *'playing'* ]]; then
####         echo "%{F$color2}>%{F-}"
####     elif [[ "$mpc_status" == *'paused'* ]]; then
####         echo "%{F$color3}|%{F-}" "(Paused)"
####     else
####         echo ''
####     fi
#### }
#### 
#### # Get a cleaner output of the mpc status.  We just want the first line
#### # which has the artist's name and the song title.  Then we want to make
#### # sure that long titles are trimmed and an indicator is appended to
#### # denote this.
#### ancillary_mpd_current() {
####     local mpc_status=$(mpc status | grep "[[a-z]*]")
####     local current_song_length="$(mpc status | head -n 1 | wc -c)"
####     local maxlen="45"
#### 
####     # if playing or paused
####     if [[ "$mpc_status" == *'p'* ]]; then
####         # Check if current mpc status has a length that is equal or higher
####         # than "maxlen".  If so trim the output to "maxlen" and append
####         # marker to denote the modification.
####         if [ "$current_song_length" -gt "$maxlen" ]; then
####             local current_song_trimmed="$(mpc status -f '%title%' | head -n 1 | cut -c 1-${maxlen})"
####             printf "%s %s" "$current_song_trimmed" "[..]"
####         else
####             echo "$(mpc status -f '%title%' | head -n 1)" 
####         fi
####     fi
#### }
#### 
#### # Here we include the status of mpd and of the current song, as defined
#### # above, and append its elapsed time / duration.  If there is no running
#### # mpd, nothing will be shown.  Update every second.
#### my_mpd_status() {
####     while true; do
####         echo "M""$(ancillary_mpd_playing)" "$(ancillary_mpd_current)"
####         sleep 1s
####     done
#### }

###### DEPRECATED but kept for future reference
#### # This is where we retrieve the information about the temperature of the
#### # laptop's core.  Updated every five minutes.
#### my_temperature() {
#### 	# make this conditional on presence of temperature_path, else print
#### 	# empty string, but keep the TEMP indicator (to show the absence of
#### 	# the path).
#### 	if [ -f /sys/devices/platform/coretemp.0/hwmon/hwmon1/temp1_input ]; then
#### 		local temperature_path='/sys/devices/platform/coretemp.0/hwmon/hwmon1/temp1_input'
#### 	elif [ -f /sys/devices/platform/coretemp.0/hwmon/hwmon2/temp1_input ]; then
#### 		local temperature_path='/sys/devices/platform/coretemp.0/hwmon/hwmon2/temp1_input'
#### 	fi
#### 
####     while true; do
####         echo "H" "%{F$color1}$(echo -e '\ue0c3')%{F-}" "$(cat $temperature_path | cut -c 1-2)Â°"
####         sleep 5m
####     done
#### }

###### DEPRECATED but kept for future reference
#### # Modified version of the content of `own_script_current_layout`.  That
#### # is a separate file just because I need the functionality decoupled
#### # from the panel.  All we do here is print the language of the current
#### # layout.
#### #
#### # TODO HELP any better way than to spam this every second?  Just update
#### # if a change occurs?
#### my_current_keyboard_layout() {
####     while true; do
####         if [[ "$(setxkbmap -query | grep 'layout' | grep -o 'us')" == 'us' ]]; then
####             echo 'K''EN' # English (US QWERTY)
####         else
####             echo 'K''EL' # Greek
####         fi
####         sleep 1s
####     done
#### }

